# -*- coding: utf-8 -*-
"""Agrobank_mock_data-cleaning1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hiOcjGzViG4T633pmSZIaGImCO9iYXTe

Tashodifiy qiymatlar, Agrobank_mock_data asosida tayyorladim va ma'lumotlarni taxlil qilishni boshladim

Faylni google colab ga yuklab olaman:
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
df = pd.read_excel("/content/agrobank_mock_data_fixed.xlsx",)
df.head()

df.shape

df.info()

df.isna().sum()

df.describe()

df.sort_values(by='Age', ascending=False)

df['Start_Date'] = pd.to_datetime(df['Start_Date'], errors='coerce')
df['Start_Date']

num_cols = ['Credit_Amount','Interest_Rate','Loan_Term_Months','Account_Balance','Credit_Score','Region_Code','Age']
for c in num_cols:
    df[c] = pd.to_numeric(df[c], errors='coerce')

# qancha NaN bo‘lib qolganini ko‘rish
df[num_cols].isna().sum()

df.duplicated().sum()

"""Random asosida ma'lumotlar olganim uchun hudud chet el mamlakatlari hududining nomlari ham keltirilgan.

Keling  buni O'zbekiston hududlari nomidan random asosida ma'lumotlarni o'zgartiraman
"""

import random

#O‘zbekiston viloyatlari va tumanlari ro‘yxati
regions = [
    "Toshkent shahri", "Toshkent viloyati - Chirchiq", "Toshkent viloyati - Angren", "Toshkent viloyati - Bekobod",
    "Samarqand viloyati - Samarqand", "Samarqand viloyati - Kattaqo‘rg‘on", "Samarqand viloyati - Nurobod",
    "Buxoro viloyati - Buxoro", "Buxoro viloyati - G‘ijduvon", "Buxoro viloyati - Kogon",
    "Qashqadaryo viloyati - Qarshi", "Qashqadaryo viloyati - Shahrisabz", "Qashqadaryo viloyati - Beshkent",
    "Qashqadaryo viloyati - Kitob", "Qashqadaryo viloyati - Koson", "Qashqadaryo viloyati - Yakkabog‘",
    "Surxondaryo viloyati - Termiz", "Surxondaryo viloyati - Denov", "Surxondaryo viloyati - Sherobod",
    "Andijon viloyati - Andijon", "Andijon viloyati - Asaka", "Andijon viloyati - Shahrixon",
    "Farg‘ona viloyati - Farg‘ona", "Farg‘ona viloyati - Qo‘qon", "Farg‘ona viloyati - Marg‘ilon",
    "Namangan viloyati - Namangan", "Namangan viloyati - Chortoq", "Namangan viloyati - Pop",
    "Navoiy viloyati - Navoiy", "Navoiy viloyati - Zarafshon", "Navoiy viloyati - Qiziltepa",
    "Xorazm viloyati - Urganch", "Xorazm viloyati - Xiva", "Xorazm viloyati - Yangibozor",
    "Sirdaryo viloyati - Guliston", "Sirdaryo viloyati - Sirdaryo", "Sirdaryo viloyati - Shirin",
    "Jizzax viloyati - Jizzax", "Jizzax viloyati - G‘allaorol", "Jizzax viloyati - Do‘stlik",
    "Qoraqalpog‘iston - Nukus", "Qoraqalpog‘iston - Taxiatosh", "Qoraqalpog‘iston - Chimboy"
]

# 'region' ustunidagi qiymatlarni O‘zbekiston hududlari bilan almashtirish
df["Region"] = [random.choice(regions) for _ in range(len(df))]

df.head()

"""Filiallarni ham nomlarini o'zgartiraman:"""

region = [
    "Toshkent", "Samarqand", "Buxoro", "Andijon", "Namangan",
    "Farg‘ona", "Qashqadaryo", "Surxondaryo", "Jizzax", "Sirdaryo",
    "Navoiy", "Xorazm", "Qoraqalpog‘iston"
]
df["Branch_Name"] = [random.choice(region) for _ in range(len(df))]

df.head()

df.columns

"""#Inglizcha nom — O‘zbekcha tarjimasi

Branch_ID — Filial identifikatori

Branch_Name — Filial nomi

Region — Hudud

Customer_ID — Mijoz identifikatori

Customer_Name — Mijoz ismi

Gender — Jinsi

Age — Yoshi

Credit_Type — Kredit turi

Credit_Amount — Kredit miqdori

Interest_Rate — Foiz stavkasi

Loan_Term_Months — Kredit muddati (oy)

Start_Date — Boshlanish sanasi

Payment_Status — To‘lov holati

Income_Level — Daromad darajasi

Marital_Status — Oilaviy holati

Occupation — Kasbi

Account_Balance — Hisobdagi qoldiq

Credit_Score — Kredit reytingi

Region_Code — Hudud kodi

Risk_Level — Xavf darajasi

##Kerakli ustunlarni qo'shdim:
"""

import random
import numpy as np

region_districts = {
    "Qoraqalpogʻiston Respublikasi": ["Nukus", "Taxiatosh", "Chimboy"],
    "Andijon": ["Andijon", "Asaka", "Shahrixon"],
    "Buxoro": ["Buxoro", "G‘ijduvon", "Kogon"],
    "Fargʻona": ["Farg‘ona", "Qo‘qon", "Marg‘ilon"],
    "Jizzax": ["Jizzax", "G‘allaorol", "Do‘stlik"],
    "Qashqadaryo": ["Qarshi", "Shahrisabz", "Beshkent", "Kitob", "Koson", "Yakkabog‘", "Dehqonobod", "Nishon", "Qamashi", "Mirishkor"],
    "Navoiy": ["Navoiy", "Zarafshon", "Qiziltepa"],
    "Namangan": ["Namangan", "Chortoq", "Pop"],
    "Samarqand": ["Samarqand", "Kattaqo‘rg‘on", "Nurobod", "Oqdaryo", "Pastdarg‘om", "Toyloq"],
    "Surxondaryo": ["Termiz", "Denov", "Sherobod"],
    "Sirdaryo": ["Guliston", "Sirdaryo", "Shirin"],
    "Toshkent viloyati": ["Chirchiq", "Angren", "Bekobod", "Olmaliq", "Yangiyo‘l", "Chinoz"],
    "Xorazm": ["Urganch", "Xiva", "Yangibozor"],
    "Toshkent shahri": ["Chilonzor", "Mirobod", "Mirzo Ulug‘bek", "Sergeli", "Shayxontohur", "Yashnobod", "Yunusobod", "Uchtepa"]
}


region_population_ranges = {
    "Qoraqalpogʻiston Respublikasi": (400000, 800000),
    "Andijon": (100000, 800000),
    "Buxoro": (50000, 400000),
    "Fargʻona": (100000, 800000),
    "Jizzax": (30000, 250000),
    "Qashqadaryo": (50000, 600000),
    "Navoiy": (20000, 200000),
    "Namangan": (50000, 600000),
    "Samarqand": (80000, 700000),
    "Surxondaryo": (50000, 400000),
    "Sirdaryo": (20000, 200000),
    "Toshkent viloyati": (100000, 1000000),
    "Xorazm": (40000, 400000),
    "Toshkent shahri": (1000000, 2500000)
}

# Build district -> population mapping
district_population = {}
for r, districts in region_districts.items():
    pop_min, pop_max = region_population_ranges.get(r, (20000, 500000))

    est_region_pop = random.randint(int(pop_min*1.5), int(pop_max*1.5))

    weights = np.random.rand(len(districts))
    weights /= weights.sum()
    for d, w in zip(districts, weights):
        district_population[d] = int(max(1000, round(est_region_pop * w)))

# Endi jadvalga region va district qo'shamiz
# Agar df da 'region' yoki 'district' kolonkasi bo'lsa, uni qayta to'ldiramiz (siz xohlasangiz uni qoldirish ham mumkin)
n = len(df)
# Birinchi: har bir satr uchun region tanlash (tasodifiy proporsional tanlash bo'lishi mumkin)
# Biz regionlarni teng ehtimol bilan tanlaymiz, keyin shu regiondan tasodifiy district olamiz.
region_choices = list(region_districts.keys())

assigned_regions = []
assigned_districts = []
for _ in range(n):
    r = random.choice(region_choices)
    d = random.choice(region_districts[r])
    assigned_regions.append(r)
    assigned_districts.append(d)

df['region'] = assigned_regions
df['district'] = assigned_districts
df['district_population'] = df['district'].map(district_population)

# branch_count (mintaqaviy filiallar soni) va active_clients (faol mijozlar) synthetic qo'shish
# branch_count: tumanga qarab kichik butun son
df['branch_count'] = df['district_population'].apply(lambda x: int(max(0, min(10, round(x/100000)) + random.choice([0,1]))))
# active_clients: har tumandagi faol mijozlar soni (tasodifiy proporsional)
# hisoblash uchun avval district darajasida jami satrlar sonini topamiz (qanchalik sizning df'da mijozlar taqsimlangan bo'lsa shunga mos)
district_counts = df['district'].value_counts().to_dict()
df['clients_in_district_rows'] = df['district'].map(district_counts)


district_active_clients = {}
for d in district_population.keys():

    pop = district_population[d]
    active = int(round(pop * random.uniform(0.01, 0.15)))
    district_active_clients[d] = active

df['active_clients_district'] = df['district'].map(district_active_clients)

# need_for_bank_service hisoblash (taxminiy)
# Oddiy formula: (population - active_clients) / population  -> qanchalik yuqori bo'lsa talab yuqori
df['need_for_bank_service'] = ((df['district_population'] - df['active_clients_district']) / df['district_population']).round(3)

# Agar division by zero bo'lsa (1000 min bilan oldik), uni to'g'rilash
df['need_for_bank_service'] = df['need_for_bank_service'].fillna(0.0)

# Yakuniy tekshiruv va saqlash
print("Final shape:", df.shape)
display(df[['region','district','district_population','active_clients_district','branch_count','need_for_bank_service']].head(10))

df.info()

df['district_population'].value_counts().head()

df.describe()

df.to_csv('agrobank_mockdata_cleaning1.csv')